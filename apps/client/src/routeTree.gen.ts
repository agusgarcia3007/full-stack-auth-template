/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as _authRouteRouteImport } from './routes/__auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminModulesRouteImport } from './routes/admin/modules'
import { Route as AdminLessonsRouteImport } from './routes/admin/lessons'
import { Route as AdminCoursesRouteImport } from './routes/admin/courses'
import { Route as _authSignupRouteImport } from './routes/__auth/signup'
import { Route as _authResetPasswordRouteImport } from './routes/__auth/reset-password'
import { Route as _authLoginRouteImport } from './routes/__auth/login'
import { Route as _authForgotPasswordRouteImport } from './routes/__auth/forgot-password'

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const _authRouteRoute = _authRouteRouteImport.update({
  id: '/__auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminModulesRoute = AdminModulesRouteImport.update({
  id: '/modules',
  path: '/modules',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminLessonsRoute = AdminLessonsRouteImport.update({
  id: '/lessons',
  path: '/lessons',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminCoursesRoute = AdminCoursesRouteImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => AdminRouteRoute,
} as any)
const _authSignupRoute = _authSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => _authRouteRoute,
} as any)
const _authResetPasswordRoute = _authResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => _authRouteRoute,
} as any)
const _authLoginRoute = _authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => _authRouteRoute,
} as any)
const _authForgotPasswordRoute = _authForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => _authRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/forgot-password': typeof _authForgotPasswordRoute
  '/login': typeof _authLoginRoute
  '/reset-password': typeof _authResetPasswordRoute
  '/signup': typeof _authSignupRoute
  '/admin/courses': typeof AdminCoursesRoute
  '/admin/lessons': typeof AdminLessonsRoute
  '/admin/modules': typeof AdminModulesRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof _authForgotPasswordRoute
  '/login': typeof _authLoginRoute
  '/reset-password': typeof _authResetPasswordRoute
  '/signup': typeof _authSignupRoute
  '/admin/courses': typeof AdminCoursesRoute
  '/admin/lessons': typeof AdminLessonsRoute
  '/admin/modules': typeof AdminModulesRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/__auth': typeof _authRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/__auth/forgot-password': typeof _authForgotPasswordRoute
  '/__auth/login': typeof _authLoginRoute
  '/__auth/reset-password': typeof _authResetPasswordRoute
  '/__auth/signup': typeof _authSignupRoute
  '/admin/courses': typeof AdminCoursesRoute
  '/admin/lessons': typeof AdminLessonsRoute
  '/admin/modules': typeof AdminModulesRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/signup'
    | '/admin/courses'
    | '/admin/lessons'
    | '/admin/modules'
    | '/admin/users'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/signup'
    | '/admin/courses'
    | '/admin/lessons'
    | '/admin/modules'
    | '/admin/users'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/__auth'
    | '/admin'
    | '/__auth/forgot-password'
    | '/__auth/login'
    | '/__auth/reset-password'
    | '/__auth/signup'
    | '/admin/courses'
    | '/admin/lessons'
    | '/admin/modules'
    | '/admin/users'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  _authRouteRoute: typeof _authRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__auth': {
      id: '/__auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/modules': {
      id: '/admin/modules'
      path: '/modules'
      fullPath: '/admin/modules'
      preLoaderRoute: typeof AdminModulesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/lessons': {
      id: '/admin/lessons'
      path: '/lessons'
      fullPath: '/admin/lessons'
      preLoaderRoute: typeof AdminLessonsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/courses': {
      id: '/admin/courses'
      path: '/courses'
      fullPath: '/admin/courses'
      preLoaderRoute: typeof AdminCoursesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/__auth/signup': {
      id: '/__auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof _authSignupRouteImport
      parentRoute: typeof _authRouteRoute
    }
    '/__auth/reset-password': {
      id: '/__auth/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof _authResetPasswordRouteImport
      parentRoute: typeof _authRouteRoute
    }
    '/__auth/login': {
      id: '/__auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof _authLoginRouteImport
      parentRoute: typeof _authRouteRoute
    }
    '/__auth/forgot-password': {
      id: '/__auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof _authForgotPasswordRouteImport
      parentRoute: typeof _authRouteRoute
    }
  }
}

interface _authRouteRouteChildren {
  _authForgotPasswordRoute: typeof _authForgotPasswordRoute
  _authLoginRoute: typeof _authLoginRoute
  _authResetPasswordRoute: typeof _authResetPasswordRoute
  _authSignupRoute: typeof _authSignupRoute
}

const _authRouteRouteChildren: _authRouteRouteChildren = {
  _authForgotPasswordRoute: _authForgotPasswordRoute,
  _authLoginRoute: _authLoginRoute,
  _authResetPasswordRoute: _authResetPasswordRoute,
  _authSignupRoute: _authSignupRoute,
}

const _authRouteRouteWithChildren = _authRouteRoute._addFileChildren(
  _authRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminCoursesRoute: typeof AdminCoursesRoute
  AdminLessonsRoute: typeof AdminLessonsRoute
  AdminModulesRoute: typeof AdminModulesRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminCoursesRoute: AdminCoursesRoute,
  AdminLessonsRoute: AdminLessonsRoute,
  AdminModulesRoute: AdminModulesRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  _authRouteRoute: _authRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
